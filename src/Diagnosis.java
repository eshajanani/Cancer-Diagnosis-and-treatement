
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.util.FileManager;
import java.io.InputStream;
import java.util.ArrayList;

import static com.hp.hpl.jena.assembler.JA.Model;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.util.FileManager;
import java.io.InputStream;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Janani
 */
public class Diagnosis extends javax.swing.JFrame {

    
     ArrayList<String> cancer_test_pos = new ArrayList<String>();
     ArrayList<String> drug_list = new ArrayList<String>();
     ArrayList<String> treatment_list = new ArrayList<String>();
						
     
     
    
    /**
     * Creates new form Diagnosis
     */
    public Diagnosis(ArrayList<String> cancer_pos) {
        initComponents();
        this.cancer_test_pos = cancer_pos;
        
        if(cancer_test_pos.isEmpty())
        {
            ResultTxt.setText(" YOu don't have cancer but may be some other disease");
        }
        else
        {
            String temp = cancer_test_pos.get(0);
            
            String result =" You are having "+ temp +" !!!!";
            ResultTxt.setText(result);
            temp ="You have been suggested Drugs and Treatments . Please press corresponding button";
            SuggestionTxt.setText(temp);
        }
        
         
    }
public Diagnosis()
{
    
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ResultTxt = new javax.swing.JLabel();
        DrugsBtn = new javax.swing.JButton();
        TreatmentBtn = new javax.swing.JButton();
        SuggestionTxt = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 153, 153));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to Cancer Diagonsis and Treatment");
        jLabel1.setToolTipText("");

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Result:");

        ResultTxt.setBackground(new java.awt.Color(102, 255, 102));
        ResultTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ResultTxt.setText("Result Here");

        DrugsBtn.setText("Drugs ");
        DrugsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrugsBtnActionPerformed(evt);
            }
        });

        TreatmentBtn.setText("Treatments");
        TreatmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TreatmentBtnActionPerformed(evt);
            }
        });

        SuggestionTxt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SuggestionTxt.setText("Suggestion");

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(DrugsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(TreatmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SuggestionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SuggestionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DrugsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TreatmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DrugsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrugsBtnActionPerformed
 
        drugQueryProcess();
        this.setVisible(false);
        new Diagnosis().setVisible(false);
        new Drugs_ListPage(cancer_test_pos,drug_list).setVisible(true);
        new Habits_CheckPage().setVisible(false);
        new CurrentLocation().setVisible(false);
        new Route_ExitPage().setVisible(false);
    //    new TestCheckPage().setVisible(false);
        new Test_SuggestionPage().setVisible(false);
        new Test_ResultPage().setVisible(false);
        // TODO add your handling code here:

    }//GEN-LAST:event_DrugsBtnActionPerformed

    
    public void drugQueryProcess()
    {
         Model model = ModelFactory.createDefaultModel();
			InputStream in = FileManager.get().open( "cancer_rdf.owl" );
			if (in == null) {
			    throw new IllegalArgumentException("File: not found");
			}

			// read the RDF/XML file
			model.read(in, null);
                        
                        
                        
                        for(int i=0;i< cancer_test_pos.size();i++){
							
			String cancer= cancer_test_pos.get(i);
			issueSPARQLDrug(model,cancer,drug_list);
			}
			System.out.println("Drug list  for cancer: " + drug_list);
                        
                        
                        model.close();
    }
    
    
    // method to get drug list given cancer type
	 public static void issueSPARQLDrug(Model m, String can_name, ArrayList<String> d_name)
		{
		 
		 
		 /****************************************Getting Drugs by cancer type*********************************************************/
			String disease=can_name;
		//	String drug="HPV";
			String defaultNameSpace = "http://www.semanticweb.org/janani/ontologies/2015/3/cancer-treatment#";
			String isDrugForNS="<http://www.semanticweb.org/janani/ontologies/2015/3/cancer-treatment#isDrugFor> ";
			String ntemp1="<"+defaultNameSpace+disease+">";
			String temp1="";


			temp1 =temp1+"   ?drug "+isDrugForNS+" " +ntemp1 + " ." ;
			String queryStringDrug = 
					"SELECT ?drug "+
							"WHERE {"+ temp1 +
							"   }";



			System.out.println(queryStringDrug);

			Query query1 = QueryFactory.create(queryStringDrug);
			
			
			QueryExecution qe1 = QueryExecutionFactory.create(query1, m);

			ResultSet results1 = qe1.execSelect();
			RDFNode drug_name;
		//	ArrayList<String> d_name = new ArrayList<String>();

			while( results1.hasNext() ) 
			{
				String[] dr_name;
				 QuerySolution querySolution = results1.next();
				 drug_name=querySolution.get("drug");
				 String temp_val =String.valueOf(drug_name);
				 dr_name= temp_val.split("#");
				 d_name.add(dr_name[1]);
				 
				 
				 
				 
			}
			

//			System.out.println("Contents of drug: " + d_name);
//		 
//		 return d_name;
		}
    
    private void TreatmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TreatmentBtnActionPerformed
        
         treatmentQueryProcess();
        this.setVisible(false);
        new Diagnosis().setVisible(false);
        new Drugs_ListPage().setVisible(false);
        new Habits_CheckPage().setVisible(false);
        new CurrentLocation().setVisible(false);
        new Route_ExitPage().setVisible(false);
    //    new TestCheckPage().setVisible(false);
        new Treatments_Page(cancer_test_pos,treatment_list).setVisible(true);
        new Test_SuggestionPage().setVisible(false);
        new Test_ResultPage().setVisible(false);
    }//GEN-LAST:event_TreatmentBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
      public void treatmentQueryProcess()
    {
         Model model = ModelFactory.createDefaultModel();
			InputStream in = FileManager.get().open( "cancer_rdf.owl" );
			if (in == null) {
			    throw new IllegalArgumentException("File: not found");
			}

			// read the RDF/XML file
			model.read(in, null);
                        
                        
                        
                       for(int i=0;i< cancer_test_pos.size();i++){
							
                        String cancer= cancer_test_pos.get(i);
			issueSPARQLTreatment(model,cancer,treatment_list);
			}
            System.out.println("Treatments list  for cancer: " + treatment_list);
                        
                        
                        model.close();
    }
    
    // method to get treatment list given cancer type
		 public static void issueSPARQLTreatment(Model m, String can_name, ArrayList<String> treatment_list)
			{
			 
			 
			 /****************************************Getting test name type by cancer name*********************************************************/
				String causes_val=can_name;
			//	String drug="HPV";
				String defaultNameSpace = "http://www.semanticweb.org/janani/ontologies/2015/3/cancer-treatment#";
				String willCauseNameSpace="<http://www.semanticweb.org/janani/ontologies/2015/3/cancer-treatment#hasTreatment>";
				String ntemp1="<"+defaultNameSpace+causes_val+">";
				String temp1="";


				//temp1 =temp1+causes+" "+"?p"+" " +"?Disease " + " ." ;
				temp1= temp1+ntemp1+" "+willCauseNameSpace+" ?tests";
				String queryStringDrug = 
						"SELECT   ?tests "+
								"WHERE {"+ temp1 +
								"   }";


				System.out.println(queryStringDrug);

				Query query1 = QueryFactory.create(queryStringDrug);
				
				
				QueryExecution qe1 = QueryExecutionFactory.create(query1, m);

				ResultSet results1 = qe1.execSelect();
								
			//	ResultSetFormatter.out(System.out, results1, query1);
				
				RDFNode test_name;
				
				while( results1.hasNext() ) 
				{
					String[] t_name;
					 QuerySolution querySolution = results1.next();
					 test_name=querySolution.get("tests");
					 String temp_val =String.valueOf(test_name);
					 t_name= temp_val.split("#");
					 if(!treatment_list.contains(t_name[1]))
					 {
						 treatment_list.add(t_name[1]);
					 }
					 
				}

//				System.out.println("Contents of drug: " + d_name);
//			 
//			 return d_name;
			}
	 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diagnosis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diagnosis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DrugsBtn;
    private javax.swing.JLabel ResultTxt;
    private javax.swing.JLabel SuggestionTxt;
    private javax.swing.JButton TreatmentBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
